% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/triversity.R
\name{get_diversity_from_path}
\alias{get_diversity_from_path}
\title{Compute the diversity associated to a random walk following a path between the
parts of a multipartite graph.}
\usage{
get_diversity_from_path(graph, path, type = "individual",
  mean_distribution = NULL, initial_distribution = NULL,
  initial_node = NULL, order = NULL, measure = NULL)
}
\arguments{
\item{graph}{A multipartite graph obtained by calling the \code{\link{get_multipartite}}
function.}

\item{path}{A vector of character strings giving the path that the random walk should
follow between the different parts of the input multipartite \code{graph}. This path can
be as long as wanted, with eventual cycles, and each string it contains should refer to a
label in \code{graph$parts}.}

\item{type}{Either \code{'individual'}, to separately compute all individual diversities,
\code{'mean'}, to compute their geometric mean, or \code{'collective'}, to compute the
overall diversity.}

\item{mean_distribution}{(optional, only when \code{type == 'mean'}) A vector of floats
in [\code{0},\code{1}] and summing to \code{1} giving the probability distribution that
is used to weight the diversity values when computing their geometric means. It should
hence contain as many values as there are rows in the input \code{transition}. If not
specified, this distribution is assumed uniform.}

\item{initial_distribution}{(optional, only when \code{type == 'collective'})
A vector of floats in [\code{0},\code{1}] and
summing to \code{1} giving the probability distribution to start with at the first part
of the input \code{path}. It should hence contain as many values as there are nodes in the
corresponding part. If not specified, this distribution is assumed uniform.}

\item{initial_node}{(optional, only when \code{type == 'collective'})
A character string giving the label of a node in the first
part of the input \code{path}. This node is then considered to have probability one, thus
being equivalent to specifying an \code{initial_distribution} with only zeros except for
one node. If not specified, no such node is defined and the initial distribution is then
assumed uniform.}

\item{order}{A vector of positive floats (possibly including \code{Inf}) giving the orders
of the diversity measures to be computed. If neither \code{order} nor \code{measure} is
specified, a predefined list of 8 diversity measures is computed.}

\item{measure}{A vector of strings giving the names of the diversity measures to compute.
Possible values are \code{richness}, \code{entropy}, \code{herfindahl}, and
\code{bergerparker}.}
}
\value{
A matrix (or a vector) of positive floats giving the individual diversity values 
of the random walks following the input \code{path} (or their mean, or the collective
diversity).
}
\description{
\code{get_diversity_from_path} computes diversity values of the probability distribution
of a random walk following a \code{path} between the different parts of the input
multipartite \code{graph}. It starts at a given part with an initial probability
distribution, then randomly follows the links of the graph between the different parts
according to the input \code{path}, then stops at the last specified part. The
implemented diversity measures all belong to the parametrized family of "True Diversity"
measures. They can either be specified by their diversity \code{order} in
[\code{0},\code{Inf}[ or by their \code{measure} name when it corresponds to classical
instances such as the richness, the Shannon entropy, the Herfindahl-Hirschman index,
or the Berger-Parker index.
}
\examples{
data (tripartite_example)
graph <- get_multipartite (data=tripartite_example)
path <- c(1,2,3)


get_diversity_from_path (graph, path, 'individual', measure=c('entropy','herfindahl'))
get_diversity_from_path (graph, path, 'individual', order=c(0,1,Inf))

# Mean of individual diversities
get_diversity_from_path (graph, path, 'mean')
get_diversity_from_path (graph, path, 'mean', mean_distribution=c(1/3,2/3))

# Collective diversities
get_diversity_from_path (graph, path, 'collective')
get_diversity_from_path (graph, path, 'collective', initial_distribution=c(0.75,0.25))

}
