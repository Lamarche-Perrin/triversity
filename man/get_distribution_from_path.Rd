% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/triversity.R
\name{get_distribution_from_path}
\alias{get_distribution_from_path}
\title{Compute the probability distribution associated to a random walk following a path
between the parts of a multipartite graph.}
\usage{
get_distribution_from_path(graph, path, initial_distribution = NULL,
  initial_node = NULL)
}
\arguments{
\item{graph}{A multipartite graph obtained by calling the \code{\link{get_multipartite}}
function.}

\item{path}{A vector of character strings giving the path that the random walk should
follow between the different parts of the input multipartite \code{graph}. This path can
be as long as wanted, with eventual cycles, and each string it contains should refer to a
label in \code{graph$parts}.}

\item{initial_distribution}{(optional) A vector of floats in [\code{0},\code{1}] and
summing to \code{1} giving the probability distribution to start with at the first part
of the input \code{path}. It should hence contain as many values as there are nodes in the
corresponding part. If not specified, this distribution is assumed uniform.}

\item{initial_node}{(optional) A character string giving the label of a node in the first
part of the input \code{path}. This node is then considered to have probability one, thus
being equivalent to specifying an \code{initial_distribution} with only zeros except for
one node. If not specified, no such node is defined and the initial distribution is then
assumed uniform.}
}
\value{
A vector of floats in [\code{0},\code{1}] and summing to \code{1} giving the
probability distribution of the random walk when arriving at the last part, after having
followed the input \code{path} within the different parts of the graph.
}
\description{
\code{get_distribution_from_path} computes the probability distribution of a random walk
following a given \code{path} between the different parts of the input multipartite
\code{graph}. It starts at a given part with an initial probability distribution, then
randomly follows the links of the graph between the different parts according to the
input \code{path}, then stops at the last specified part.
}
\examples{
data (tripartite_example)
graph <- get_multipartite (data=tripartite_example)

path <- c(2,1,2,3)
as.matrix (get_distribution_from_path (graph, path))
as.matrix (get_distribution_from_path (graph, path, initial_distribution=c(1/3,0,0,2/3)))
as.matrix (get_distribution_from_path (graph, path, initial_node='i2'))

}
